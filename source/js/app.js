$(document).ready(function () {
    /* 
        First, call `gadget.ready()` to make sure the gadget has obtained an API token
        to use for making OU Campus API calls. If your gadget will not make any API calls,
        you can dispense with this method. This asynchronous method returns a jQuery
        Promise object.
        
        Then, call `gadget.fetch()` to get the gadget's config data from the system. This
        method, which also returns a jQuery Promise object, uses the API, which is why it
        needs to follow the call to `gadget.ready()`.
        
        If you don't need the config data, you don't need to call gadget.fetch().
    */
    var apihost;
    var token;

    var checkedOutContent = [];
    var siteList = [];

    // global vars:
    gadget.ready().then(gadget.fetch).then(function () {
       
       //set variables:
        apihost = gadget.get('apihost');
        token = gadget.get('token');        

        console.log("Gadget Ready!!");

        // get list of sites:
        getSitesInAccount();

    });

    function getSitesInAccount(){
        $.when( sites.getSites() ).done(function(data) {
            
            // sort data by site name:
            var sorted = sites.sortData(data);
            console.log("sorted", sorted);
            // format list of sites on the HTML:
            $.each(sorted, function(key, value) {
                siteList.push(value.site);

                loopThroughSite(value);
            });
        });
    }

    function loopThroughSite(value){
        // get list of checkout files for each site:
        $.when( files.getFiles(value.site) ).done(function(data) {

            var _active = files.getActiveFiles(data);
            var _html = $(sites.createTableRow( value, _active.length ) );
            var $checkInButton = $('<a/>').attr({ class: 'btn btn-outline-info btn-sm float-right'}).html('Check In');
            
            //add click event:
            $checkInButton.on('click', function(){
                //files.checkInFiles(_active);
                $(_html).find(".count").html("0 files");

                // add visibility classes:
                if ($(".toggleSites").hasClass("active")){
                    $(_html).addClass("visible");
                }else{
                    $(_html).addClass("invisible");
                }
            });

            $(_html).find('.button').append( $checkInButton );
            $("#checkedOut tbody").append( _html );

        });
    }


    //create event listeners:
    $(".btn.checkInAll").on('click', function(){
        $.each(siteList, function(key, value) {
            _button = $("." + value).not('.visible').not('.invisible').find("a.btn").click();
        });
    });

    $(".btn.refresh").on('click', function(){
        $("#checkedOut tbody").html("");
        $(".toggleSites").removeClass("active");
        getSitesInAccount();
    })

    $(".btn.toggleSites").on('click', function(){

        $(this).toggleClass("active");
        var _active = $(this).hasClass("active");

        $.each(siteList, function(key, value) {
            if (_active){
                if ($("." + value).hasClass("invisible")){
                    $("." + value).removeClass("invisible");
                    $("." + value).addClass("visible");
                }
            }else{
                if ($("." + value).hasClass("visible")){
                    $("." + value).removeClass("visible");
                    $("." + value).addClass("invisible");
                }
            }
        });

    });

});



$(gadget).on({
    'expanded': function (evt) {
        // This event is triggered when the user expands (makes visible) a sidebar gadget.
        console.log('Gadget expanded.');
    },
    'collapsed': function (evt) {
        // This event is triggered when the user collapses (hides) a sidebar gadget.
        console.log('Gadget collapsed.');
    },
    'configuration': function (evt, config) {
        // If the user changes the gadget's configuration through the configuration modal,
        // the gadget will hear about it and get the new config in the data argument here.
        console.log('New config:', config);
    },
    'notification': function (evt, notification) {
        // If the gadget's config.xml contains a "notification" entry, any notifications
        // of the specified type(s) generated by OU Campus will trigger 'notification'
        // events that can be handled here.
        console.log('Notification received:', notification);
    }
});